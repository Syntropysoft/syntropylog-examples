/**
 * FILE: src/testing/BeaconRedisMock.ts
 * DESCRIPTION: A mock implementation of IBeaconRedis for use in unit tests.
 * This mock uses `vi.fn()` for all methods, allowing tests to spy on calls,
 * mock return values, and simulate errors.
 */
import { IBeaconRedis, IBeaconRedisTransaction } from '../redis/IBeaconRedis';
import { RedisInstanceReconfigurableConfig } from '../config';
import { RedisZMember } from '../redis/redis.types';
export declare class BeaconRedisMock implements IBeaconRedis {
    readonly getInstanceName: import("vitest").Mock<[], string>;
    readonly connect: import("vitest").Mock<[], Promise<void>>;
    readonly quit: import("vitest").Mock<[], Promise<void>>;
    readonly updateConfig: import("vitest").Mock<[Partial<RedisInstanceReconfigurableConfig>], void>;
    readonly multi: import("vitest").Mock<[], IBeaconRedisTransaction>;
    readonly get: import("vitest").Mock<[string], Promise<string | null>>;
    readonly set: import("vitest").Mock<[string, string, (number | undefined)?], Promise<string | null>>;
    readonly del: import("vitest").Mock<[string | string[]], Promise<number>>;
    readonly exists: import("vitest").Mock<[string | string[]], Promise<number>>;
    readonly expire: import("vitest").Mock<[string, number], Promise<boolean>>;
    readonly ttl: import("vitest").Mock<[string], Promise<number>>;
    readonly incr: import("vitest").Mock<[string], Promise<number>>;
    readonly decr: import("vitest").Mock<[string], Promise<number>>;
    readonly incrBy: import("vitest").Mock<[string, number], Promise<number>>;
    readonly decrBy: import("vitest").Mock<[string, number], Promise<number>>;
    readonly hGet: import("vitest").Mock<[string, string], Promise<string | null>>;
    readonly hSet: import("vitest").Mock<[string, string | Record<string, any>, any?], Promise<number>>;
    readonly hGetAll: import("vitest").Mock<[string], Promise<Record<string, string>>>;
    readonly hDel: import("vitest").Mock<[string, string | string[]], Promise<number>>;
    readonly hExists: import("vitest").Mock<[string, string], Promise<boolean>>;
    readonly hIncrBy: import("vitest").Mock<[string, string, number], Promise<number>>;
    readonly lPush: import("vitest").Mock<[string, any], Promise<number>>;
    readonly rPush: import("vitest").Mock<[string, any], Promise<number>>;
    readonly lPop: import("vitest").Mock<[string], Promise<string | null>>;
    readonly rPop: import("vitest").Mock<[string], Promise<string | null>>;
    readonly lRange: import("vitest").Mock<[string, number, number], Promise<string[]>>;
    readonly lLen: import("vitest").Mock<[string], Promise<number>>;
    readonly lTrim: import("vitest").Mock<[string, number, number], Promise<string>>;
    readonly sAdd: import("vitest").Mock<[string, any], Promise<number>>;
    readonly sMembers: import("vitest").Mock<[string], Promise<string[]>>;
    readonly sIsMember: import("vitest").Mock<[string, any], Promise<boolean>>;
    readonly sRem: import("vitest").Mock<[string, any], Promise<number>>;
    readonly sCard: import("vitest").Mock<[string], Promise<number>>;
    readonly zAdd: import("vitest").Mock<[string, number | {
        score: number;
        value: any;
    }[], any?], Promise<number>>;
    readonly zRange: import("vitest").Mock<[string, string | number, string | number, any?], Promise<string[]>>;
    readonly zRangeWithScores: import("vitest").Mock<[string, string | number, string | number, any?], Promise<RedisZMember[]>>;
    readonly zRem: import("vitest").Mock<[string, any], Promise<number>>;
    readonly zCard: import("vitest").Mock<[string], Promise<number>>;
    readonly zScore: import("vitest").Mock<[string, any], Promise<number | null>>;
    readonly subscribe: import("vitest").Mock<[string, (message: string, channel: string) => void], Promise<void>>;
    readonly unsubscribe: import("vitest").Mock<[(string | undefined)?], Promise<void>>;
    readonly publish: import("vitest").Mock<[string, string], Promise<number>>;
    readonly ping: import("vitest").Mock<[(string | undefined)?], Promise<string>>;
    readonly info: import("vitest").Mock<[(string | undefined)?], Promise<string>>;
    readonly eval: import("vitest").Mock<[string, string[], string[]], Promise<any>>;
}

/**
 * @file src/logger/transports/BaseConsolePrettyTransport.ts
 * @description An abstract base class for console transports that provide colored, human-readable output.
 */
import chalk from 'chalk';
import { LogEntry, LogLevel } from '../../types';
import { Transport, TransportOptions } from './Transport';
/**
 * @class BaseConsolePrettyTransport
 * @description Provides common functionality for "pretty" console transports,
 * including color handling and console method selection. Subclasses must
 * implement the `formatLogString` method to define the final output format.
 * @extends {Transport}
 */
export declare abstract class BaseConsolePrettyTransport extends Transport {
    protected readonly chalk: chalk.Chalk;
    constructor(options?: TransportOptions);
    /**
     * The core log method. It handles common logic and delegates specific
     * formatting to the subclass.
     * @param {LogEntry} entry - The log entry to process.
     * @returns {Promise<void>}
     */
    log(entry: LogEntry): Promise<void>;
    /**
     * Subclasses must implement this method to define the final, formatted
     * string that will be logged to the console.
     * @param {Record<string, any>} logObject - The final log object after formatting.
     * @returns {string} The formatted log string.
     */
    protected abstract formatLogString(logObject: Record<string, any>): string;
    /**
     * Determines which console method to use based on the log level.
     * @param {LogLevel} level - The log level.
     * @returns {Function} The corresponding console method (e.g., console.log).
     */
    protected getConsoleMethod(level: LogLevel): (message?: any, ...optionalParams: any[]) => void;
}

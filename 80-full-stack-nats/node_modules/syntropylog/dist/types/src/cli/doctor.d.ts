import { DiagnosticRule } from './checks';
/**
 * @interface DoctorOptions
 * @description Defines the options for running the doctor engine.
 */
interface DoctorOptions {
    /** The path to the configuration file to analyze. */
    configPath: string;
    /**
     * An optional array of rules to execute. If provided, these rules are used
     * instead of loading from a manifest file. This is used by the `audit` command.
     */
    rules?: DiagnosticRule[];
    /**
     * A flag indicating if the doctor is being run as part of an audit.
     * If true, it suppresses some console output and prevents `process.exit`.
     */
    isAuditJob?: boolean;
}
/**
 * The main engine for the doctor command. It reads and validates a config file,
 * runs diagnostic checks, prints the results, and returns a boolean indicating
 * whether the check passed (i.e., no errors were found).
 * @param {DoctorOptions} options - The options for the doctor run.
 * @returns {Promise<boolean>} A promise that resolves to `true` if there are no
 * 'ERROR' level results, and `false` otherwise.
 */
export declare function runDoctor(options: DoctorOptions): Promise<boolean>;
export {};

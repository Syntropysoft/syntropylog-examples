/**
 * @interface FieldMaskConfig
 * @description Configuration for masking a specific field.
 */
export interface FieldMaskConfig {
    /** The path to the field (e.g., "user.password") or a RegExp to match field names. */
    path: string | RegExp;
    /** The masking strategy: 'full' replaces the entire value, 'partial' shows only the last characters. */
    type: 'full' | 'partial';
    /** For 'partial' masking, the number of characters to show at the end. @default 4 */
    showLast?: number;
}
/**
 * @interface MaskingEngineOptions
 * @description Options for configuring the MaskingEngine.
 */
export interface MaskingEngineOptions {
    /** Un array de nombres de campos sensibles. */
    fields?: (string | RegExp)[];
    /** El carácter de máscara. */
    maskChar?: string;
    /** Profundidad máxima de búsqueda. Default: 3 */
    maxDepth?: number;
    /** El estilo de enmascaramiento ('fixed' o 'preserve-length'). */
    style?: 'fixed' | 'preserve-length';
}
/**
 * @class MaskingEngine
 * A central engine responsible for applying masking rules to log metadata.
 * It recursively scans objects and masks data based on key names, and can also
 * sanitize sensitive values from URL paths. Its design is "secure-by-default,"
 * allowing for runtime configuration updates that can only add (not remove) masking rules.
 */
export declare class MaskingEngine {
    /** @private A dynamic array of sensitive field names or RegExps. */
    private fieldConfigs;
    /** @private The character(s) to use for masking. */
    private readonly maskChar;
    /** @private The maximum recursion depth for masking nested objects. */
    private readonly maxDepth;
    /** @private The masking style to apply. */
    private readonly style;
    /** @private Secure regex tester with timeout. */
    private readonly regexTest;
    constructor(options?: MaskingEngineOptions);
    /**
     * Adds new sensitive fields to the masking configuration at runtime.
     * This method is "additive only" to prevent security degradation. Once a field
     * is added to the mask list, it cannot be removed during the application's lifecycle.
     *
     * @param {(string | RegExp)[]} fields - An array of new field names or RegExps to add.
     *        Duplicates are silently ignored.
     */
    addFields(fields: (string | RegExp)[]): void;
    /**
     * Processes a metadata object and applies the configured masking rules.
     * @param {Record<string, any>} meta - The metadata object to process.
     * @returns {Record<string, any>} A new object with the masked data.
     */
    process(meta: Record<string, unknown>): Promise<Record<string, unknown>>;
    /**
     * @private
     * Recursively traverses an object or array to mask data.
     * It applies two types of masking:
     * 1. **Key-based masking**: If an object key matches a rule in `fieldConfigs`, its value is masked.
     * 2. **Path-based masking**: If a string value looks like a path/URL, it's sanitized.
     *
     * @param {any} data - The data to process (can be an object, array, or primitive).
     * @param {string} currentPath - The dot-notation path of the current key.
     * @param {number} depth - The current recursion depth to prevent infinite loops.
     * @returns {any} The processed data with masking applied.
     */
    private maskRecursively;
    /**
     * @private
     * Checks if a given object key path is sensitive based on the configured rules.
     * @param {string} path - The dot-notation path of the key (e.g., "user.password").
     * @returns {Promise<boolean>} - True if the path should be masked.
     */
    private isSensitive;
    /**
     * @private
     * Sanitizes a string that may represent a URL path.
     * If a segment of the path matches a sensitive field name (case-insensitively),
     * the following path segment is completely replaced with the mask character.
     *
     * @example
     * // with `fields: ['password']`
     * sanitizeUrlPath("/api/v1/password/s3cr3t-v4lu3")
     * // returns: "/api/v1/password/*****"
     *
     * @param {string} str - The string to sanitize.
     * @returns {string} The sanitized string, or the original if no sensitive keywords were found.
     */
    private sanitizeUrlPath;
    /**
     * @private
     * Generates the appropriate mask string based on the configured style.
     * @param {any} originalValue - The original value being masked. Its length is used for 'preserve-length' style.
     * @returns {string} The generated mask string.
     */
    private getMask;
}

import { Transport } from './transports/Transport';
import type { LogLevel, LoggerOptions } from '../types';
import { IContextManager } from '../context';
import { SerializerRegistry } from '../serialization/SerializerRegistry';
import { MaskingEngine } from '../masking/MaskingEngine';
import { SyntropyLog } from '../SyntropyLog';
export interface LoggerDependencies {
    contextManager: IContextManager;
    serializerRegistry: SerializerRegistry;
    maskingEngine: MaskingEngine;
    syntropyLogInstance: SyntropyLog;
}
/**
 * @class Logger
 * @description The core logger implementation. It orchestrates the entire logging
 * pipeline, from argument parsing and level checking to serialization, masking,
 * and dispatching to transports.
 */
export declare class Logger {
    level: LogLevel;
    name: string;
    private transports;
    private bindings;
    private dependencies;
    constructor(name: string, transports: Transport[], dependencies: LoggerDependencies, options?: Omit<LoggerOptions, 'transports'>);
    /**
     * @private
     * The core asynchronous logging method that runs the full processing pipeline.
     * It handles argument parsing, level filtering, serialization, masking,
     * and finally dispatches the processed log entry to the appropriate transports.
     * @param {LogLevel} level - The severity level of the log message.
     * @param {...any[]} args - The arguments to be logged, following the Pino-like signature (e.g., `(obj, msg, ...)` or `(msg, ...)`).
     * @returns {Promise<void>}
     */
    private _log;
    /**
     * Logs a message at the 'info' level.
     * @param {...any[]} args - The arguments to log.
     */
    info(...args: unknown[]): Promise<void>;
    /**
     * Logs a message at the 'warn' level.
     * @param {...any[]} args - The arguments to log.
     */
    warn(...args: unknown[]): Promise<void>;
    /**
     * Logs a message at the 'error' level.
     * @param {...any[]} args - The arguments to log.
     */
    error(...args: unknown[]): Promise<void>;
    /**
     * Logs a message at the 'debug' level.
     * @param {...any[]} args - The arguments to log.
     */
    debug(...args: unknown[]): Promise<void>;
    /**
     * Logs a message at the 'trace' level.
     * @param {...any[]} args - The arguments to log.
     */
    trace(...args: unknown[]): Promise<void>;
    /**
     * Logs a message at the 'fatal' level.
     * @param {...any[]} args - The arguments to log.
     */
    fatal(...args: unknown[]): Promise<void>;
    /**
     * Dynamically updates the minimum log level for this logger instance.
     * Any messages with a severity lower than the new level will be ignored.
     * @param {LogLevel} level - The new minimum log level.
     */
    setLevel(level: LogLevel): void;
    /**
     * Creates a new child logger instance that inherits the parent's configuration
     * and adds a set of persistent key-value bindings.
     * @param {Record<string, any>} bindings - Key-value pairs to add to the child logger.
     * @returns {Logger} A new logger instance with the combined bindings.
     */
    child(bindings: Record<string, any>): Logger;
    /**
     * Creates a new logger instance with a `source` field bound to it.
     * @param {string} source - The name of the source (e.g., 'redis', 'AuthModule').
     * @returns {Logger} A new logger instance with the `source` binding.
     */
    withSource(source: string): Logger;
    /**
     * Creates a new logger instance with a `retention` field bound to it.
     * The provided rules object is deep-cloned to ensure immutability.
     * @param {Record<string, any>} rules - A JSON object containing the retention rules.
     * @returns {Logger} A new logger instance with the `retention` binding.
     */
    withRetention(rules: Record<string, any>): Logger;
    /**
     * Creates a new logger instance with a `transactionId` field bound to it.
     * @param {string} transactionId - The unique ID of the transaction.
     * @returns {Logger} A new logger instance with the `transactionId` binding.
     */
    withTransactionId(transactionId: string): Logger;
}

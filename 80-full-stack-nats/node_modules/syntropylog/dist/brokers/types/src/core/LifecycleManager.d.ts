import { EventEmitter } from 'events';
import { SyntropyLogConfig } from '../config';
import { IContextManager } from '../context';
import { LoggerFactory } from '../logger/LoggerFactory';
import { RedisManager } from '../redis/RedisManager';
import { HttpManager } from '../http/HttpManager';
import { BrokerManager } from '../brokers/BrokerManager';
import { SerializerRegistry } from '../serialization/SerializerRegistry';
import { MaskingEngine } from '../masking/MaskingEngine';
import { SyntropyLog } from '../SyntropyLog';
export type SyntropyLogState = 'NOT_INITIALIZED' | 'INITIALIZING' | 'READY' | 'ERROR' | 'SHUTTING_DOWN' | 'SHUTDOWN';
export declare class LifecycleManager extends EventEmitter {
    private state;
    config: SyntropyLogConfig | undefined;
    contextManager: IContextManager | undefined;
    loggerFactory: LoggerFactory | undefined;
    redisManager: RedisManager | undefined;
    httpManager: HttpManager | undefined;
    brokerManager: BrokerManager | undefined;
    serializerRegistry: SerializerRegistry;
    maskingEngine: MaskingEngine;
    private logger;
    private syntropyFacade;
    constructor(syntropyFacade: SyntropyLog);
    getState(): SyntropyLogState;
    init(config: SyntropyLogConfig): Promise<void>;
    shutdown(): Promise<void>;
    ensureReady(): asserts this is this & {
        config: SyntropyLogConfig;
        contextManager: IContextManager;
        loggerFactory: LoggerFactory;
        redisManager: RedisManager;
        httpManager: HttpManager;
        brokerManager: BrokerManager;
    };
}

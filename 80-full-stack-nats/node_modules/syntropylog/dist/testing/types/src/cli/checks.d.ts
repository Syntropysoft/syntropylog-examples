/**
 * @file src/cli/checks.ts
 * @description The engine for the diagnostic rules. This file contains the array of
 * core rules and the logic to execute them against a configuration.
 */
import { SyntropyLogConfig } from '../config';
/**
 * @interface CheckResult
 * @description Represents the outcome of a single diagnostic check.
 */
export interface CheckResult {
    /** The severity level of the finding. */
    level: 'ERROR' | 'WARN' | 'INFO';
    /** A short, descriptive title for the finding. */
    title: string;
    /** A detailed message explaining the issue. */
    message: string;
    /** An optional recommendation on how to fix the issue. */
    recommendation?: string;
}
/**
 * @interface DiagnosticRule
 * @description Defines the structure for a diagnostic rule that can be run by the doctor.
 */
export interface DiagnosticRule {
    /** A unique identifier for the rule, used for disabling it in the config. */
    id: string;
    /** A brief description of what the rule checks for. */
    description: string;
    /** The function that contains the actual check logic. */
    check: (config: SyntropyLogConfig) => CheckResult[];
}
/**
 * @constant coreRules
 * @description An array containing the set of built-in diagnostic rules provided by SyntropyLog.
 * Users can extend, filter, or replace this set in their own audit manifests.
 */
export declare const coreRules: DiagnosticRule[];
/**
 * Executes a set of diagnostic rules against a given configuration.
 * It respects the `doctor.disableRules` property in the configuration,
 * skipping any rules that the user has explicitly disabled.
 * @param {SyntropyLogConfig} config - The parsed configuration object to check.
 * @param {DiagnosticRule[]} rules - The array of rules to execute.
 * @returns {CheckResult[]} An array of all findings from the executed rules.
 */
export declare function runAllChecks(config: SyntropyLogConfig, rules: DiagnosticRule[]): CheckResult[];

/**
 * @file src/SyntropyLog.ts
 * @description The main public-facing singleton class for the SyntropyLog framework.
 * This class acts as a Facade, providing a simple and clean API surface
 * while delegating all complex lifecycle and orchestration work to the internal
 * LifecycleManager.
 */
import { EventEmitter } from 'events';
import { SyntropyLogConfig } from './config';
import { IContextManager } from './context';
import { ILogger } from './logger';
import { InstrumentedHttpClient } from './http/InstrumentedHttpClient';
import { InstrumentedBrokerClient } from './brokers/InstrumentedBrokerClient';
import { SyntropyLogState } from './core/LifecycleManager';
import { LogLevel } from './types';
import { RedisConnectionManager } from './redis/RedisConnectionManager';
/**
 * @class SyntropyLog
 * @description The main public entry point for the framework. It follows the
 * Singleton pattern and acts as an EventEmitter to report on its lifecycle,
 * proxying events from its internal LifecycleManager.
 */
export declare class SyntropyLog extends EventEmitter {
    private static instance;
    private readonly lifecycleManager;
    private constructor();
    static getInstance(): SyntropyLog;
    getState(): SyntropyLogState;
    init(config: SyntropyLogConfig): Promise<void>;
    shutdown(): Promise<void>;
    getLogger(name?: string): ILogger;
    getRedis(name: string): RedisConnectionManager;
    getHttp(name: string): InstrumentedHttpClient;
    getBroker(name: string): InstrumentedBrokerClient;
    getContextManager(): IContextManager;
    getConfig(): SyntropyLogConfig;
    getFilteredContext(level: LogLevel): Record<string, unknown>;
    getMasker(): import(".").MaskingEngine;
    getSerializer(): import("./serialization/SerializerRegistry").SerializerRegistry;
    _resetForTesting(): void;
}
/** The singleton instance of the SyntropyLog framework. */
export declare const syntropyLog: SyntropyLog;
